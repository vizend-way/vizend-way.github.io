"use strict";(self.webpackChunkdocs_github_io=self.webpackChunkdocs_github_io||[]).push([[7852],{8202:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=t(4848),a=t(8453);const o={sidebar_position:12},r="Guidance of Writing YAML for Entity and CDO Generation",s={id:"studio-guide/yaml_eng",title:"Guidance of Writing YAML for Entity and CDO Generation",description:"Overview",source:"@site/docs/studio-guide/yaml_eng.md",sourceDirName:"studio-guide",slug:"/studio-guide/yaml_eng",permalink:"/docs/studio-guide/yaml_eng",draft:!1,unlisted:!1,editUrl:"https://gitlab.com/vizend/docs/-/edit/main/docs/studio-guide/yaml_eng.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"Entity, Cdo  \uc0dd\uc131\uc744 \uc704\ud55c YAML \uc791\uc131 \uac00\uc774\ub4dc",permalink:"/docs/studio-guide/yaml_kor"},next:{title:"Checkpoint Guide",permalink:"/docs/category/checkpoint-guide"}},l={},d=[{value:"Overview",id:"overview",level:2},{value:"Basic Input",id:"basic-input",level:2},{value:"Entity Information Input",id:"entity-information-input",level:2},{value:"Attribute Information Input",id:"attribute-information-input",level:2},{value:"Attribute Input Overview",id:"attribute-input-overview",level:3},{value:"Attribute Input Method",id:"attribute-input-method",level:3},{value:"1. Input name only",id:"1-input-name-only",level:4},{value:"2. Input name and type",id:"2-input-name-and-type",level:4},{value:"3. Usage of list attributes",id:"3-usage-of-list-attributes",level:4},{value:"4. immutable",id:"4-immutable",level:4},{value:"Entity Relation Information Input",id:"entity-relation-information-input",level:2},{value:"Definition of 1 Relation",id:"definition-of-1-relation",level:3},{value:"Definition of 1:1 Relation",id:"definition-of-11-relation",level:3},{value:"Value Object Information Input",id:"value-object-information-input",level:2},{value:"Definition of ValueObject and ValueGroup",id:"definition-of-valueobject-and-valuegroup",level:3},{value:"Definition of Enum",id:"definition-of-enum",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"guidance-of-writing-yaml-for-entity-and-cdo-generation",children:"Guidance of Writing YAML for Entity and CDO Generation"}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"Vizend Studio provides a feature to generate Entity and CDO using YAML format files. This document aims to describe the methods for writing YAML documents."}),"\n",(0,i.jsx)(n.h2,{id:"basic-input",children:"Basic Input"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"groupId: io.vizend\nappName: small-talk\n"})}),"\n",(0,i.jsx)(n.p,{children:"groupId and appName are essential inputs that influence the package naming during code generation."}),"\n",(0,i.jsx)(n.h2,{id:"entity-information-input",children:"Entity Information Input"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"entities:\n  - name: RoomBoard\n    type: Stage\n    aggregate: room\n"})}),"\n",(0,i.jsx)(n.p,{children:'Below the "entities" section, input a list of items.'}),"\n",(0,i.jsx)(n.p,{children:"Input the name and type(available types are Stage, Domain, Data, Void)."}),"\n",(0,i.jsx)(n.p,{children:"Input the name of aggregate. This is a mandatory field and influences the determination of the Entity package during generation."}),"\n",(0,i.jsx)(n.h2,{id:"attribute-information-input",children:"Attribute Information Input"}),"\n",(0,i.jsx)(n.p,{children:"The method for entering attribute information is applied not only for Entity but also for ValueObject and ValueGroup."}),"\n",(0,i.jsx)(n.h3,{id:"attribute-input-overview",children:"Attribute Input Overview"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"entities:\n  - name: Address\n    type: Stage\n    aggregate: address\n    attributes:\n      - name: city\n        type: String\n        comment: \ub3c4\uc2dc\n        example: Seoul\n"})}),"\n",(0,i.jsx)(n.p,{children:'Below the "attributes" section, input a list of items.'}),"\n",(0,i.jsx)(n.p,{children:"Input the name. If not provided, it will generate the attribute based on the type name."}),"\n",(0,i.jsx)(n.p,{children:'Input the "type", which can be a primitive type or a Java type name. If not provided, it will be considered as String.'}),"\n",(0,i.jsx)(n.p,{children:'If you input a "comment", it will generate a field annotation.'}),"\n",(0,i.jsx)(n.p,{children:'If you input an "example", it will be used for generating sample() method code.'}),"\n",(0,i.jsx)(n.h3,{id:"attribute-input-method",children:"Attribute Input Method"}),"\n",(0,i.jsx)(n.h4,{id:"1-input-name-only",children:"1. Input name only"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"attributes:\n  - name: question\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can only specify the 'name' attribute. In this case, it will generate an attribute named 'question' with a String type."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:"private String question;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"2-input-name-and-type",children:"2. Input name and type"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"attributes:\n  - name: time\n    type: long\n"})}),"\n",(0,i.jsx)(n.p,{children:"The most common method is to specify 'name' and 'type'. 'Type' can include not only primitive types but also Java class name."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:"private long time;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"3-usage-of-list-attributes",children:"3. Usage of list attributes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"attributes:\n  - name: usages\n    list: io.vizend.accent.domain.xray.usage.FeatureUsage\n"})}),"\n",(0,i.jsx)(n.p,{children:"If the attribute type is List, you can define the generic type. In this case, the code will be generated as following. If 'name' is omitted, the attribute name will be determined by the type name defined in the list."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:"private List<FeatureUsage> usages;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"4-immutable",children:"4. immutable"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"attributes:\n  - name: time\n    type: long\n    immutable: true\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you set the 'immutable' attribute to true, the generated entity attributes will include the '@FieldImmutable' annotation, creating immutable attributes that cannot be modified."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:"@FieldImmutable\nprivate long time;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"entity-relation-information-input",children:"Entity Relation Information Input"}),"\n",(0,i.jsxs)(n.p,{children:["Entity code is generated based on the relation between entities. You can define 1",":N"," and 1:1 relation using three attributes: oneToMany, manyToOne, and oneToOne."]}),"\n",(0,i.jsxs)(n.h3,{id:"definition-of-1-relation",children:["Definition of 1",":N"," Relation"]}),"\n",(0,i.jsx)(n.p,{children:"If there is a one-to-many relationship between the two defined entities, you can use the 'oneToMany' and 'manyToOne' attributes."}),"\n",(0,i.jsxs)(n.p,{children:["The following example illustrates the case where RoomBoard and RoomieBoard have a 1",":N"," relation."]}),"\n",(0,i.jsx)(n.p,{children:"Configuration for the One side Entity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"entities:\n  - name: RoomBoard\n    ...\n    oneToMany:\n      entity: RoomieBoard\n"})}),"\n",(0,i.jsx)(n.p,{children:"Configuration for the Many side Entity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"  - name: RoomieBoard\n    ...\n    manyToOne:\n      entity: RoomBoard\n"})}),"\n",(0,i.jsx)(n.p,{children:"Entity Code Generated from the Above Configuration."}),"\n",(0,i.jsx)(n.p,{children:"Code for the One side Entity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:"public class RoomBoard extends StageEntity {\n\n    ...\n    private transient List<RoomieBoard> roomieBoards;\n    \n    ...\n"})}),"\n",(0,i.jsx)(n.p,{children:"Code for the Many side Entity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:"public class RoomieBoard extends StageEntity {\n\n    ...\n    @FieldSourceId\n    private String roomBoardId;\n    \n    ...\n"})}),"\n",(0,i.jsx)(n.p,{children:"In the above code, the One side Entity can conceptually have the Many side Entity objects in a List format. However, since it doesn't actually hold the objects, the corresponding field is generated as transient. The Many side Entity can have a reference to the One side, so a field of type FieldSourceId is generated."}),"\n",(0,i.jsx)(n.h3,{id:"definition-of-11-relation",children:"Definition of 1:1 Relation"}),"\n",(0,i.jsx)(n.p,{children:"When the relation between two entities is one-to-one, you can define the relation using the 'oneToOne' attribute. In this case, you can declare ownership under the 'owning' sub-attribute in one of the entities."}),"\n",(0,i.jsx)(n.p,{children:"Configuration for the One (Owning) side Entity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"    - name: Roomie\n      ...\n    oneToOne:\n      entity: RoomieBoard\n      owning: true\n"})}),"\n",(0,i.jsx)(n.p,{children:"Configuration for the One (Not Owning) side Entity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"      - name: RoomieBoard\n        ...\n      oneToOne:\n        entity: Roomie\n"})}),"\n",(0,i.jsx)(n.p,{children:"Generated Entity Code."}),"\n",(0,i.jsx)(n.p,{children:"One (Owning) side Entity Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:"public class Roomie extends StageEntity {\n\n    ...\n    private transient RoomieBoard roomieBoard;\n    \n    ...\n"})}),"\n",(0,i.jsx)(n.p,{children:"One (Not Owning) side Entity Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:"public class RoomieBoard extends StageEntity {\n\n    ...\n    @FieldSourceId\n    private String roomieId;\n    \n    ...\n"})}),"\n",(0,i.jsx)(n.p,{children:"In the above code, on the owner side, the entity conceptually owns the related entity but doesn't actually own it, so it's declared as a transient field."}),"\n",(0,i.jsx)(n.p,{children:"Additionally, on the non-owning side, the entity holds the owner's entity ID in the form of FieldSourceId."}),"\n",(0,i.jsx)(n.h2,{id:"value-object-information-input",children:"Value Object Information Input"}),"\n",(0,i.jsx)(n.p,{children:"You can input the necessary information for ValueObject, ValueGroup, and Enum while defining the Entity. All three can be defined as attributes of the Entity or externally to the Entity."}),"\n",(0,i.jsx)(n.h3,{id:"definition-of-valueobject-and-valuegroup",children:"Definition of ValueObject and ValueGroup"}),"\n",(0,i.jsx)(n.p,{children:"Entity internal definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"     entities:\n     - name: RoomBoard\n       type: Stage\n       aggregate: room\n       attributes:\n           ...\n             - valueObject:\n             name: LastTalk\n             attributes:\n               - name: roomId\n               - name: name\n               - name: message\n"})}),"\n",(0,i.jsx)(n.p,{children:"The method of internal definition in Entity is to define attributes of the Entity. You can define 'valueObject' or 'valueGroup' as a sublist item under 'attributes' and specify the name and attruibutes. In this case, if you doan't input an aggregate, it is generated under the aggregate defined in the parent Entity."}),"\n",(0,i.jsx)(n.p,{children:"Entity external definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"     valueObjects:\n     - name: LastTalk\n       aggregate: room\n       attributes:\n         - name: roomId\n         - name: name\n         - name: message\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can define ValueObject/ValueGroup external of the Entity. They can be defined as sublist items under 'valueObjects' or 'valueGroups'. It's important to note that you must define an aggregate. The defined ValueObject or ValueGroup will be generated under the specified aggregate."}),"\n",(0,i.jsx)(n.p,{children:"ValueObject Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:"public class LastTalk implements ValueObject {\n    private String roomId;\n    private String name;\n    private String message;\n    ...\n"})}),"\n",(0,i.jsx)(n.h3,{id:"definition-of-enum",children:"Definition of Enum"}),"\n",(0,i.jsx)(n.p,{children:"You can define the Enum types that used in the Entity. Same as the ValueObject, they can be defined internally or externally to the Entity."}),"\n",(0,i.jsx)(n.p,{children:"Definition of internal Entity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"     entities:\n     - name: Roomie\n       type: Stage\n       aggregate: room\n       attributes:\n         - enumType:\n             name: RoomRole\n             entries:\n               - Owner\n               - Admin\n               - Roomie\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can input them as sublist items under the 'attributes' of the Entity. You can list the types in 'entries'. The aggregate follows the parent Entity."}),"\n",(0,i.jsx)(n.p,{children:"Definition of external Entity"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"     enumTypes:\n     - name: RoomRole\n       aggregate: room\n       entires:\n         - Owner\n         - Admin\n         - Roomie\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can input them as sublist items under 'enumTypes'. In this case, you must input the aggregate."}),"\n",(0,i.jsx)(n.p,{children:"Enum Type Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:"public enum RoomRole {\n    Owner, Admin, Roomie\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Here's an example of generated Enum code."})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);