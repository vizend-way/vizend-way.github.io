"use strict";(self.webpackChunkdocs_github_io=self.webpackChunkdocs_github_io||[]).push([[1327],{1368:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>d,toc:()=>a});var i=t(4848),o=t(8453);const s={sidebar_position:6},r="Using of @FieldSequence annotation",d={id:"studio-guide/sequence_eng",title:"Using of @FieldSequence annotation",description:"Overview",source:"@site/docs/studio-guide/sequence_eng.md",sourceDirName:"studio-guide",slug:"/studio-guide/sequence_eng",permalink:"/docs/studio-guide/sequence_eng",draft:!1,unlisted:!1,editUrl:"https://gitlab.com/vizend/docs/-/edit/main/docs/studio-guide/sequence_eng.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"@FieldSequence \uc5b4\ub178\ud14c\uc774\uc158 \uae30\ub2a5 \uc0ac\uc6a9",permalink:"/docs/studio-guide/sequence_kor"},next:{title:"Entity \uc218\uc815",permalink:"/docs/studio-guide/entityModify_kor"}},c={},a=[{value:"Overview",id:"overview",level:2},{value:"Add \u2018@FieldSequence\u2019 for Attributes",id:"add-fieldsequence-for-attributes",level:2},{value:"Sequence Codes in Classes",id:"sequence-codes-in-classes",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"using-of-fieldsequence-annotation",children:"Using of @FieldSequence annotation"}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"\u2018@FieldSequence\u2019 has been added for some specific functionality that related to sequence."}),"\n",(0,i.jsx)(n.h2,{id:"add-fieldsequence-for-attributes",children:"Add \u2018@FieldSequence\u2019 for Attributes"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:"@Getter\n@Setter\n@NoArgsConstructor\npublic class Foo extends StageEntity {\n    //\n    private String name;\n    @FieldSequence\n    private int firstSequence;\n    @FieldSequence\n    private int secondSequence;\n...\n"})}),"\n",(0,i.jsx)(n.p,{children:"Enter the Attributes for Entity Class and ADD \u2018@FieldSequence\u2019 annotation on the top of the attributes if necessary."}),"\n",(0,i.jsx)(n.h2,{id:"sequence-codes-in-classes",children:"Sequence Codes in Classes"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"img_1.png",src:t(9417).A+"",width:"792",height:"1648"})}),"\n",(0,i.jsx)(n.p,{children:"After generating the backend codes, FieldSequence codes are also generated in FooLogic, FooStroe, FooJpaStore and FooJpaRepository."}),"\n",(0,i.jsx)(n.p,{children:"FooLogic"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:"public int nextFirstSequence(String fooId) {\n    /* Gen by Vizend Studio v6.1.0 */\n    return fooStore.nextFirstSequence(fooId, 1);\n}\npublic int nextSecondSequence(String fooId) {\n    /* Gen by Vizend Studio v6.1.0 */\n    return fooStore.nextSecondSequence(fooId, 1);\n}\npublic int[] nextFirstSequence(String fooId, int limit) {\n    /* Gen by Vizend Studio v6.1.0 */\n    int lastSeq = fooStore.nextFirstSequence(fooId, limit);\n    int[] sequences = new int[limit];\n    int index = 0;\n    for (int seq = lastSeq - limit + 1; seq <= lastSeq; seq++) {\n        sequences[index] = seq;\n        index++;\n    }\n    return sequences;\n}\npublic int[] nextSecondSequence(String fooId, int limit) {\n    /* Gen by Vizend Studio v6.1.0 */\n    int lastSeq = fooStore.nextSecondSequence(fooId, limit);\n    int[] sequences = new int[limit];\n    int index = 0;\n    for (int seq = lastSeq - limit + 1; seq <= lastSeq; seq++) {\n        sequences[index] = seq;\n        index++;\n    }\n    return sequences;\n}\n...\n"})}),"\n",(0,i.jsx)(n.p,{children:"Sequence codes are generated automatically in FooLogic class."}),"\n",(0,i.jsx)(n.p,{children:"nextFirstSequence(String foodId)_ this method returns the next sequence from \u2018FooStroe\u2019 associated with the given \u2018fooId\u2019. It appears to always request the next sequence by setting the limit to 1 each time. (e.g. If the sequence (firstSequence) is 3, it increases it by 1 and then returns the value.)"}),"\n",(0,i.jsx)(n.p,{children:"nextSecondSequence(String foodId) _ same as the nextFirstSequence method, but it simply uses a different sequence (secondSequence)."}),"\n",(0,i.jsxs)(n.p,{children:["int[] nextFirstSequence(String fooId, int limit) _ The method returns multiple values in an array corresponding to the next sequences (firstSequence) of Foo entities identified by fooId. In other words, it returns an array of values between the initial sequence value and the increased value, incremented by the limit. (e.g. if the 'limit' is 3 and the sequence (firstSequence) is 3, an array like '",6,"' will be returned.)"]}),"\n",(0,i.jsx)(n.p,{children:"int[] nextSecondSequence(String fooId) _ same as the int[ ] nextFirstSequence method, but it simply uses a different sequence (secondSequence)."}),"\n",(0,i.jsx)(n.p,{children:"FooStore"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:'@Generated("Gen by Vizend Studio v6.1.0")\npublic interface FooStore {\n    /* Gen by Vizend Studio v6.1.0 */\n    void create(Foo foo);\n    void createAll(List<Foo> foos);\n    Foo retrieve(String id);\n    Foo retrieve(QueryParams queryParams);\n    List<Foo> retrieveAll(List<String> fooIds);\n    List<Foo> retrieveList(QueryParams queryParams, Offset offset);\n    void update(Foo foo);\n    void delete(Foo foo);\n    void delete(String id);\n    boolean exists(String id);\n    int nextFirstSequence(String id, int increment);\n    int nextSecondSequence(String id, int increment);\n}\n...\n'})}),"\n",(0,i.jsx)(n.p,{children:"The sequence codes generated from the FooStore interface are represented by the methods nextFirstSequence() and nextSecondSequence()."}),"\n",(0,i.jsx)(n.p,{children:"Int nextFirstSequence(String id, int increment)_ this method returns the value of the firstSequence of the Foo entity corresponding to the given id incremented by the specified increment."}),"\n",(0,i.jsx)(n.p,{children:"Int nextSecondSequence(String id, int increment)_ same as the int nextFirstSequence method, but it simply uses a different sequence (secondSequence)."}),"\n",(0,i.jsx)(n.p,{children:"FooJpaStore"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:'@Override\npublic int nextFirstSequence(String id, int increment) {\n    /* Gen by Vizend Studio v6.1.0 */\n    fooJpaRepository.increaseFirstSequence(id, increment);\n    Optional<FooJpo> fooJpo = fooJpaRepository.findById(id);\n    if (fooJpo.isEmpty()) {\n        throw new NoSuchElementException("Foo id: " + id);\n    }\n    return fooJpo.get().getFirstSequence();\n}\n@Override\npublic int nextSecondSequence(String id, int increment) {\n    /* Gen by Vizend Studio v6.1.0 */\n    fooJpaRepository.increaseSecondSequence(id, increment);\n    Optional<FooJpo> fooJpo = fooJpaRepository.findById(id);\n    if (fooJpo.isEmpty()) {\n        throw new NoSuchElementException("Foo id: " + id);\n    }\n    return fooJpo.get().getSecondSequence();\n}\n...\n'})}),"\n",(0,i.jsx)(n.p,{children:"Sequence codes in FooJpaStore class."}),"\n",(0,i.jsx)(n.p,{children:"The sequence will be incremented by using JpaRepository, and it throws a 'NoSuchElementException' if the corresponding entity does not exist."}),"\n",(0,i.jsx)(n.p,{children:"FooJpaRepository"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Java",children:'@Generated("Gen by Vizend Studio v6.1.0")\npublic interface FooJpaRepository extends JpaRepository<FooJpo, String> {\n    /* Gen by Vizend Studio v6.1.0 */\n    @Modifying\n    @Query("update FooJpo a set a.firstSequence = a.firstSequence + :increment where id =\n            void increaseFirstSequence(@Param("id") String id, @Param("increment") int increment)\n    @Modifying\n    @Query("update FooJpo a set a.secondSequence = a.secondSequence + :increment whe\n            = :id")\n            void increaseSecondSequence(@Param("id") String id, @Param("increment") int increme\n}\n...\n'})}),"\n",(0,i.jsx)(n.p,{children:"Sequence codes in FooJpaRepository."}),"\n",(0,i.jsx)(n.p,{children:"The query to update the sequence field of the entity table has been implemented in JPQL. Generally, JPQL does not support Data Manipulation Language (DML) operations (insert, update, delete). By declaring the @Modifying annotation, DML operations have been enabled."})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},9417:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/se-sequenceTree-f27a43b600671b686517df135ded9330.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var i=t(6540);const o={},s=i.createContext(o);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);